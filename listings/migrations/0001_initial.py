# Generated by Django 5.0.6 on 2024-08-12 09:40

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('OF', 'Offer'), ('DM', 'Demand')], max_length=2)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ads', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Band',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('genre', models.CharField(blank=True, choices=[('Metal', 'Metal'), ('Black Metal', 'Black Metal'), ('Death Metal', 'Death Metal'), ('Thrash Metal', 'Thrash Metal'), ('Power Metal', 'Power Metal'), ('Progressive Metal', 'Progressive Metal'), ('Symphonic Metal', 'Symphonic Metal'), ('Gothic Metal', 'Gothic Metal'), ('Folk Metal', 'Folk Metal'), ('Viking Metal', 'Viking Metal'), ('Sludge Metal', 'Sludge Metal'), ('Groove Metal', 'Groove Metal'), ('Industrial Metal', 'Industrial Metal'), ('Nu Metal', 'Nu Metal'), ('Djent', 'Djent'), ('Hardcore', 'Hardcore'), ('Beatdown Hardcore', 'Beatdown Hardcore'), ('Post-Hardcore', 'Post-Hardcore'), ('Melodic Hardcore', 'Melodic Hardcore'), ('Hardcore Punk', 'Hardcore Punk'), ('Crossover Thrash', 'Crossover Thrash'), ('Metalcore', 'Metalcore'), ('Mathcore', 'Mathcore'), ('Crust Punk', 'Crust Punk'), ('Extreme Metal', 'Extreme Metal'), ('Grindcore', 'Grindcore'), ('Brutal Death Metal', 'Brutal Death Metal'), ('Technical Death Metal', 'Technical Death Metal'), ('Deathgrind', 'Deathgrind'), ('Goregrind', 'Goregrind'), ('Pornogrind', 'Pornogrind'), ('Alternative and Fusion Genres', 'Alternative and Fusion Genres'), ('Alternative Metal', 'Alternative Metal'), ('Avant-Garde Metal', 'Avant-Garde Metal'), ('Funk Metal', 'Funk Metal'), ('Rap Metal', 'Rap Metal'), ('Jazz Metal', 'Jazz Metal'), ('Experimental Metal', 'Experimental Metal'), ('Doom and Stoner', 'Doom and Stoner'), ('Traditional Doom', 'Traditional Doom'), ('Funeral Doom', 'Funeral Doom'), ('Drone Doom', 'Drone Doom'), ('Psychedelic Doom', 'Psychedelic Doom'), ('Sludge Doom', 'Sludge Doom'), ('Desert Rock', 'Desert Rock'), ('Punk and Post-Punk', 'Punk and Post-Punk'), ('Anarcho-Punk', 'Anarcho-Punk'), ('Skate Punk', 'Skate Punk'), ('Pop Punk', 'Pop Punk'), ('Gothic Rock', 'Gothic Rock'), ('Deathrock', 'Deathrock'), ('Coldwave', 'Coldwave'), ('Noise and Experimental', 'Noise and Experimental'), ('Noise Rock', 'Noise Rock'), ('Noise Punk', 'Noise Punk'), ('Industrial Noise', 'Industrial Noise'), ('Noisecore', 'Noisecore'), ('Power Electronics', 'Power Electronics'), ('Experimental Rock', 'Experimental Rock'), ('Other Related Styles', 'Other Related Styles'), ('Grunge', 'Grunge'), ('Shoegaze', 'Shoegaze'), ('Post-Rock', 'Post-Rock'), ('Emo', 'Emo'), ('Screamo', 'Screamo'), ('Powerviolence', 'Powerviolence'), ('Alternative Rock', 'Alternative Rock')], max_length=30, null=True)),
                ('biography', models.CharField(blank=True, max_length=1000, null=True)),
                ('year_formed', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2024)])),
                ('active', models.BooleanField(default=True)),
                ('official_homepage', models.URLField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('mail', models.EmailField(blank=True, max_length=254, null=True)),
                ('image_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='Image URL')),
                ('audio_file1', models.FileField(blank=True, null=True, upload_to='bands/audio/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp3', 'wav'])])),
                ('audio_file1_title', models.CharField(blank=True, max_length=100, null=True)),
                ('audio_file2', models.FileField(blank=True, null=True, upload_to='bands/audio/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp3', 'wav'])])),
                ('audio_file2_title', models.CharField(blank=True, max_length=100, null=True)),
                ('audio_file3', models.FileField(blank=True, null=True, upload_to='bands/audio/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp3', 'wav'])])),
                ('audio_file3_title', models.CharField(blank=True, max_length=100, null=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_bands', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='bands', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('venue', models.CharField(max_length=255)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('event_link', models.URLField(blank=True, null=True, verbose_name='Event Link')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='listings.band')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(blank=True, choices=[('Records', 'Records'), ('Clothing', 'Clothing'), ('Posters', 'Posters'), ('Miscellaneous', 'Miscellaneous')], max_length=20, null=True)),
                ('point_of_sale', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()], verbose_name='Point of Sale')),
                ('image_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='Image URL')),
                ('band', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.band')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_listings', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='listings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='listings.message')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
